name: Tests before Merging PR
on:
  label:
    types: [created, deleted]
  pull_request_review:
    types: [submitted, edited]
  pull_request:
    types: [labeled]
  pull_request_target:
    types: [labeled]
  workflow_dispatch:

jobs:
  build-and-push-docker-image:
    if: github.event.review.state == 'approved'  && (!contains(github.event.label.name, 'skip-ci') && !contains(github.event.pull_request.labels.*.name, 'skip-ci')) || github.event_name == 'workflow_dispatch' || contains(github.event.pull_request.labels.*.name, 'test-ci')
    name: Build Container images and push to repositories
    runs-on: kni4
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Build and Push Pipeline Image
        id: build-pipe
        run: |
          cd ${{ github.workspace }}

          if [[ "${{ github.event.pull_request.head.ref }}" == 'main' ]];then
            RELEASE=latest
          else
            RELEASE=${{ github.event.pull_request.head.ref }}
          fi

          echo ">>>> Building Pipe Release"
          echo "Release: ${RELEASE}"
          echo "Image Branch: ${{ github.event.pull_request.head.ref }}"
          echo "Git hash: ${{ github.sha }}"
          echo ">>>>"

          RELEASE=${RELEASE} make pipe

      - name: Build and Push UI Image
        id: build-ui
        run: |
          cd ${{ github.workspace }}

          if [[ "${{ github.event.pull_request.head.ref }}" == 'main' ]];then
            RELEASE=latest
          else
            RELEASE=${{ github.event.pull_request.head.ref }}
          fi

          echo ">>>> Building UI Release"
          echo "Release: ${RELEASE}"
          echo "Image Branch: ${{ github.event.pull_request.head.ref }}"
          echo "Git hash: ${{ github.sha }}"
          echo ">>>>"

          RELEASE=${RELEASE} make ui


  full-stack-testing:
    if: github.event.review.state == 'approved'  && !contains(github.event.label.name, 'skip-ci') || github.event_name == 'workflow_dispatch' || contains(github.event.pull_request.labels.*.name, 'test-ci')
    runs-on: CI-pool
    needs: build-and-push-docker-image
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Load Pipelines
        run: |
          export KUBECONFIG=/root/.kcli/clusters/test-ci/auth/kubeconfig
          cd hack/deploy-hub-local
          ./bootstrap-ci.sh

      - name: remove all old deployments and vms
        run: |
          export KUBECONFIG=/root/.kcli/clusters/test-ci/auth/kubeconfig
          oc delete --ignore-not-found=true managedcluster spoke0-cluster || true
          oc delete --ignore-not-found=true ns spoke0-cluster || true
          kcli delete vm spoke0-cluster-m0 -y || true
          kcli delete vm spoke0-cluster-m1 -y || true
          kcli delete vm spoke0-cluster-m2 -y || true
          kcli delete vm spoke0-cluster-w0 -y || true
          list=$(tkn pr ls -n spoke-deployer |grep -i running | cut -d' ' -f1)
          for i in $list; do
            tkn pr cancel $i -n spoke-deployer || true
          done

      - name: create new vms and requirements
        run: |
          export KUBECONFIG=/root/.kcli/clusters/test-ci/auth/kubeconfig
          cd hack/deploy-hub-local
          ./build-spoke.sh ~/openshift_pull.json 4.10.5 2.4 4.9 sno

      - name: launch the spoke pipeline
        run: |
          export KUBECONFIG=/root/.kcli/clusters/test-ci/auth/kubeconfig
          tkn pipeline start -n spoke-deployer -p ztp-container-image="quay.io/ztpfw/pipeline:${{ github.event.pull_request.head.ref }}" -p spokes-config="$(cat /root/actions-runner/_work/ztp-pipeline-relocatable/ztp-pipeline-relocatable/hack/deploy-hub-local/spokes.yaml)" -p kubeconfig=${KUBECONFIG} -w name=ztp,claimName=ztp-pvc --timeout 5h --use-param-defaults deploy-ztp-spokes

      - name: verify if the pipe has been successful
        run: |
          export KUBECONFIG=/root/.kcli/clusters/test-ci/auth/kubeconfig

          while [ $(tkn pr ls -n spoke-deployer | head -2 | grep -i running | wc -l) -gt 0 ]; do
            echo "Waiting for the pipeline to finish"
            echo "Current Status:  $(tkn  pr describe -n spoke-deployer -L -ojsonpath={.status.conditions[0].message})"
            echo "---------"
            sleep 300
          done

          if [ $(tkn pr ls -n spoke-deployer | head -2 | grep -i failed | wc -l) -gt 0 ]; then
            echo "The pipeline has failed"
            exit 1
          elif [ $(tkn pr ls -n spoke-deployer | head -2 | grep -i succeeded | wc -l) -gt 0 ]; then
            echo "The pipeline has succeeded"
            exit 0
          else
            echo "The pipeline has not finished"
            exit 1
          fi
